{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-pyright.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-pyright",
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-pyright#/definitions/PluginConfig"
            }
          ],
          "definitions": {
            "PluginConfig": {
              "properties": {
                "settings": {
                  "additionalProperties": false,
                  "properties": {
                    // lsp
                    "pyright.dev_environment": {
                      "default": "",
                      "description": "Enables the pre-defined environment setup for specific developing needs.",
                      "enum": [
                        "",
                        "sublime_text",
                        "sublime_text_33",
                        "sublime_text_38"
                      ],
                      "markdownEnumDescriptions": [
                        "No modifications applied.",
                        "Suitable for people who are developing ST python plugins. The Python version which the developed plugin runs on will be used. - `sys.path` from the plugin_host will be added into \"python.analysis.extraPaths\" so that ST package dependencies can be resolved by the LSP server.",
                        "Similar to \"sublime_text\" but Python 3.3 forced.",
                        "Similar to \"sublime_text\" but Python 3.8 forced."
                      ]
                    },
                    // pyright
                    // @see https://github.com/microsoft/pyright/blob/main/packages/vscode-pyright/package.json
                    "pyright.disableLanguageServices": {
                      "default": false,
                      "description": "Disables type completion, definitions, and references.",
                      "type": "boolean"
                    },
                    "pyright.disableOrganizeImports": {
                      "default": false,
                      "description": "Disables the \u201cOrganize Imports\u201d command.",
                      "type": "boolean"
                    },
                    "python.analysis.autoImportCompletions": {
                      "default": true,
                      "description": "Offer auto-import completions.",
                      "type": "boolean"
                    },
                    "python.analysis.autoSearchPaths": {
                      "default": true,
                      "description": "Automatically add common search paths like 'src'?",
                      "type": "boolean"
                    },
                    "python.analysis.diagnosticMode": {
                      "default": "openFilesOnly",
                      "enum": [
                        "openFilesOnly",
                        "workspace"
                      ],
                      "enumDescriptions": [
                        "Analyzes and reports errors on only open files.",
                        "Analyzes and reports errors on all files in the workspace."
                      ],
                      "type": "string"
                    },
                    "python.analysis.diagnosticSeverityOverrides": {
                      "default": {},
                      "description": "Allows a user to override the severity levels for individual diagnostics.",
                      "additionalProperties": false,
                      "properties": {
                        "reportAssertAlwaysTrue": {
                          "default": "warning",
                          "description": "Diagnostics for 'assert' statement that will provably always assert. This can be indicative of a programming error.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportCallInDefaultInitializer": {
                          "default": "none",
                          "description": "Diagnostics for function calls within a default value initialization expression. Such calls can mask expensive operations that are performed at module initialization time.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportConstantRedefinition": {
                          "default": "none",
                          "description": "Diagnostics for attempts to redefine variables whose names are all-caps with underscores and numerals.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportDuplicateImport": {
                          "default": "none",
                          "description": "Diagnostics for an imported symbol or module that is imported more than once.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportFunctionMemberAccess": {
                          "default": "none",
                          "description": "Diagnostics for member accesses on functions.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportGeneralTypeIssues": {
                          "default": "error",
                          "description": "Diagnostics for general type inconsistencies, unsupported operations, argument/parameter mismatches, etc. Covers all of the basic type-checking rules not covered by other rules. Does not include syntax errors.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportImplicitStringConcatenation": {
                          "default": "none",
                          "description": "Diagnostics for two or more string literals that follow each other, indicating an implicit concatenation. This is considered a bad practice and often masks bugs such as missing commas.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportImportCycles": {
                          "default": "none",
                          "description": "Diagnostics for cyclical import chains. These are not errors in Python, but they do slow down type analysis and often hint at architectural layering issues. Generally, they should be avoided.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportIncompatibleMethodOverride": {
                          "default": "none",
                          "description": "Diagnostics for methods that override a method of the same name in a base class in an incompatible manner (wrong number of parameters, incompatible parameter types, or incompatible return type).",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportIncompatibleVariableOverride": {
                          "default": "none",
                          "description": "Diagnostics for overrides in subclasses that redefine a variable in an incompatible way.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportIncompleteStub": {
                          "default": "none",
                          "description": "Diagnostics for the use of a module-level \u201c__getattr__\u201d function, indicating that the stub is incomplete.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportInconsistentConstructor": {
                          "default": "none",
                          "description": "Diagnostics for __init__ and __new__ methods whose signatures are inconsistent.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportInvalidStringEscapeSequence": {
                          "default": "warning",
                          "description": "Diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportInvalidStubStatement": {
                          "default": "none",
                          "description": "Diagnostics for type stub statements that do not conform to PEP 484.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportInvalidTypeVarUse": {
                          "default": "warning",
                          "description": "Diagnostics for improper use of type variables in a function signature.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMatchNotExhaustive": {
                          "default": "none",
                          "description": "Diagnostics for 'match' statements that do not exhaustively match all possible values.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingImports": {
                          "default": "error",
                          "description": "Diagnostics for imports that have no corresponding imported python file or type stub file.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingModuleSource": {
                          "default": "warning",
                          "description": "Diagnostics for imports that have no corresponding source file. This happens when a type stub is found, but the module source file was not found, indicating that the code may fail at runtime when using this execution environment. Type checking will be done using the type stub.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingParameterType": {
                          "default": "none",
                          "description": "Diagnostics for parameters that are missing a type annotation.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingSuperCall": {
                          "default": "none",
                          "description": "Diagnostics for missing call to parent class for inherited `__init__` methods.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingTypeArgument": {
                          "default": "none",
                          "description": "Diagnostics for generic class reference with missing type arguments.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportMissingTypeStubs": {
                          "default": "none",
                          "description": "Diagnostics for imports that have no corresponding type stub file (either a typeshed file or a custom type stub). The type checker requires type stubs to do its best job at analysis.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalCall": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to call a variable with an Optional type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalContextManager": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to use an Optional type as a context manager (as a parameter to a with statement).",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalIterable": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to use an Optional type as an iterable value (e.g. within a for statement).",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalMemberAccess": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to access a member of a variable with an Optional type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalOperand": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to use an Optional type as an operand to a binary or unary operator (like '+', '==', 'or', 'not').",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOptionalSubscript": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to subscript (index) a variable with an Optional type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportOverlappingOverload": {
                          "default": "none",
                          "description": "Diagnostics for function overloads that overlap in signature and obscure each other or have incompatible return types.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportPrivateImportUsage": {
                          "default": "error",
                          "description": "Diagnostics for incorrect usage of symbol imported from a \"py.typed\" module that is not re-exported from that module.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportPrivateUsage": {
                          "default": "none",
                          "description": "Diagnostics for incorrect usage of private or protected variables or functions. Protected class members begin with a single underscore _ and can be accessed only by subclasses. Private class members begin with a double underscore but do not end in a double underscore and can be accessed only within the declaring class. Variables and functions declared outside of a class are considered private if their names start with either a single or double underscore, and they cannot be accessed outside of the declaring module.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportPropertyTypeMismatch": {
                          "default": "none",
                          "description": "Diagnostics for property whose setter and getter have mismatched types.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportSelfClsParameterName": {
                          "default": "warning",
                          "description": "Diagnostics for a missing or misnamed \u201cself\u201d parameter in instance methods and \u201ccls\u201d parameter in class methods. Instance methods in metaclasses (classes that derive from \u201ctype\u201d) are allowed to use \u201ccls\u201d for instance methods.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportShadowedImports": {
                          "default": "none",
                          "description": "Diagnostics for files that are overriding a module in the stdlib.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportTypeCommentUsage": {
                          "default": "none",
                          "description": "Diagnostics for usage of deprecated type comments.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportTypedDictNotRequiredAccess": {
                          "default": "error",
                          "description": "Diagnostics for an attempt to access a non-required key within a TypedDict without a check for its presence.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnboundVariable": {
                          "default": "error",
                          "description": "Diagnostics for unbound and possibly unbound variables.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUndefinedVariable": {
                          "default": "error",
                          "description": "Diagnostics for undefined variables.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUninitializedInstanceVariable": {
                          "default": "none",
                          "description": "Diagnostics for instance variables that are not declared or initialized within class body or `__init__` method.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnknownArgumentType": {
                          "default": "none",
                          "description": "Diagnostics for call arguments for functions or methods that have an unknown type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnknownLambdaType": {
                          "default": "none",
                          "description": "Diagnostics for input or return parameters for lambdas that have an unknown type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnknownMemberType": {
                          "default": "none",
                          "description": "Diagnostics for class or instance variables that have an unknown type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnknownParameterType": {
                          "default": "none",
                          "description": "Diagnostics for input or return parameters for functions or methods that have an unknown type.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnknownVariableType": {
                          "default": "none",
                          "description": "Diagnostics for variables that have an unknown type..",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnnecessaryCast": {
                          "default": "none",
                          "description": "Diagnostics for 'cast' calls that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnnecessaryComparison": {
                          "default": "none",
                          "description": "Diagnostics for '==' and '!=' comparisons that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnnecessaryContains": {
                          "default": "none",
                          "description": "Diagnostics for 'in' operation that is statically determined to be unnecessary. Such operations are sometimes indicative of a programming error.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnnecessaryIsInstance": {
                          "default": "none",
                          "description": "Diagnostics for 'isinstance' or 'issubclass' calls where the result is statically determined to be always true. Such calls are often indicative of a programming error.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnnecessaryTypeIgnoreComment": {
                          "default": "none",
                          "description": "Diagnostics for '# type: ignore' comments that have no effect.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnsupportedDunderAll": {
                          "default": "warning",
                          "description": "Diagnostics for unsupported operations performed on __all__.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUntypedBaseClass": {
                          "default": "none",
                          "description": "Diagnostics for base classes whose type cannot be determined statically. These obscure the class type, defeating many type analysis features.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUntypedClassDecorator": {
                          "default": "none",
                          "description": "Diagnostics for class decorators that have no type annotations. These obscure the class type, defeating many type analysis features.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUntypedFunctionDecorator": {
                          "default": "none",
                          "description": "Diagnostics for function decorators that have no type annotations. These obscure the function type, defeating many type analysis features.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUntypedNamedTuple": {
                          "default": "none",
                          "description": "Diagnostics when \u201cnamedtuple\u201d is used rather than \u201cNamedTuple\u201d. The former contains no type information, whereas the latter does.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedCallResult": {
                          "default": "none",
                          "description": "Diagnostics for call expressions whose results are not consumed and are not None.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedClass": {
                          "default": "none",
                          "description": "Diagnostics for a class with a private name (starting with an underscore) that is not accessed.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedCoroutine": {
                          "default": "error",
                          "description": "Diagnostics for call expressions that return a Coroutine and whose results are not consumed.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedExpression": {
                          "default": "warning",
                          "description": "Diagnostics for simple expressions whose value is not used in any way.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedFunction": {
                          "default": "none",
                          "description": "Diagnostics for a function or method with a private name (starting with an underscore) that is not accessed.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedImport": {
                          "default": "none",
                          "description": "Diagnostics for an imported symbol that is not referenced within that file.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportUnusedVariable": {
                          "default": "none",
                          "description": "Diagnostics for a variable that is not accessed.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        },
                        "reportWildcardImportFromLibrary": {
                          "default": "warning",
                          "description": "Diagnostics for an wildcard import from an external library.",
                          "enum": [
                            "none",
                            "information",
                            "warning",
                            "error"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "python.analysis.extraPaths": {
                      "default": [],
                      "description": "Additional import search resolution paths",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "python.analysis.logLevel": {
                      "default": "Information",
                      "description": "Specifies the level of logging for the Output panel",
                      "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Trace"
                      ],
                      "type": "string"
                    },
                    "python.analysis.stubPath": {
                      "default": "typings",
                      "description": "Path to directory containing custom type stub files.",
                      "type": "string"
                    },
                    "python.analysis.typeCheckingMode": {
                      "type": "string",
                      "default": "off",
                      "enum": [
                        "off",
                        "basic",
                        "strict"
                      ],
                      "description": "Defines the default rule set for type checking.",
                      "enumDescriptions": [
                        "Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.",
                        "All \"off\" rules + basic type checking rules.",
                        "All \"off\" rules + all type checking rules."
                      ]
                    },
                    "python.analysis.typeshedPaths": {
                      "default": [],
                      "description": "Paths to look for typeshed modules.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "python.analysis.useLibraryCodeForTypes": {
                      "default": false,
                      "description": "Use library implementations to extract type information when type stub is not present.",
                      "type": "boolean"
                    },
                    "python.pythonPath": {
                      "default": "python",
                      "description": "Path to Python, you can use a custom version of Python.",
                      "type": "string"
                    },
                    "python.venvPath": {
                      "default": "",
                      "description": "Path to folder with a list of Virtual Environments.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/pyrightconfig.json"
        ],
        // @see https://github.com/microsoft/pyright/blob/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json
        "schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "description": "Pyright Configuration Schema",
          "allowComments": true,
          "allowTrailingCommas": true,
          "type": "object",
          "definitions": {
            "diagnostic": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "none",
                    "information",
                    "warning",
                    "error"
                  ]
                }
              ]
            }
          },
          "properties": {
            "include": {
              "$id": "#/properties/include",
              "type": "array",
              "title": "Files and directories included in type analysis",
              "items": {
                "$id": "#/properties/include/items",
                "type": "string",
                "title": "File or directory to include in type analysis",
                "pattern": "^(.*)$"
              }
            },
            "exclude": {
              "$id": "#/properties/exclude",
              "type": "array",
              "title": "Files and directories excluded from type analysis",
              "items": {
                "$id": "#/properties/exclude/items",
                "type": "string",
                "title": "File or directory to exclude from type analysis",
                "pattern": "^(.*)$"
              }
            },
            "ignore": {
              "$id": "#/properties/ignore",
              "type": "array",
              "title": "Files and directories whose diagnostics are suppressed",
              "items": {
                "$id": "#/properties/ignore/items",
                "type": "string",
                "title": "File or directory where diagnostics should be suppressed",
                "pattern": "^(.*)$"
              }
            },
            "strict": {
              "$id": "#/properties/strict",
              "type": "array",
              "title": "Files and directories that should use 'strict' type checking rules",
              "items": {
                "$id": "#/properties/strict/items",
                "type": "string",
                "title": "File or directory that should use 'strict' type checking rules",
                "pattern": "^(.*)$"
              }
            },
            "defineConstant": {
              "$id": "#/properties/defineConstant",
              "type": "object",
              "title": "Identifiers that should be treated as constants",
              "properties": {
              },
              "additionalProperties": {
                  "type": ["string", "boolean"],
                  "title": "Value of constant (boolean or string)"
              }
            },
            "typeCheckingMode": {
              "$id": "#/properties/typeCheckingMode",
              "type": "string",
              "enum": [
                "off",
                "basic",
                "strict"
              ],
              "title": "Specifies the default rule set to use for type checking",
              "default": "basic"
            },
            "useLibraryCodeForTypes": {
              "$id": "#/properties/useLibraryCodeForTypes",
              "type": "boolean",
              "title": "Use library implementations to extract type information when type stub is not present",
              "default": false
            },
            "typeshedPath": {
              "$id": "#/properties/typeshedPath",
              "type": "string",
              "title": "Path to directory containing typeshed type stub files",
              "default": "",
              "pattern": "^(.*)$"
            },
            "stubPath": {
              "$id": "#/properties/stubPath",
              "type": "string",
              "title": "Path to directory containing custom type stub files",
              "default": "",
              "examples": [
                "src/typestubs"
              ],
              "pattern": "^(.*)$"
            },
            "strictListInference": {
              "$id": "#/properties/strictListInference",
              "type": "boolean",
              "title": "Infer strict types for list expressions",
              "default": false
            },
            "strictSetInference": {
              "$id": "#/properties/strictSetInference",
              "type": "boolean",
              "title": "Infer strict types for set expressions",
              "default": false
            },
            "strictDictionaryInference": {
              "$id": "#/properties/strictDictionaryInference",
              "type": "boolean",
              "title": "Infer strict types for dictionary expressions",
              "default": false
            },
            "analyzeUnannotatedFunctions": {
              "$id": "#/properties/analyzeUnannotatedFunctions",
              "type": "boolean",
              "title": "Analyze and report diagnostics for functions that have no annotations",
              "default": true
            },
            "strictParameterNoneValue": {
              "$id": "#/properties/strictParameterNoneValue",
              "type": "boolean",
              "title": "Allow implicit Optional when default parameter value is None",
              "default": true
            },
            "enableTypeIgnoreComments": {
              "$id": "#/properties/enableTypeIgnoreComments",
              "type": "boolean",
              "title": "Allow \"# type: ignore\" comments",
              "default": true
            },
            "reportGeneralTypeIssues": {
              "$id": "#/properties/reportGeneralTypeIssues",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of general type issues",
              "default": "error"
            },
            "reportPropertyTypeMismatch": {
              "$id": "#/properties/reportPropertyTypeMismatch",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of property getter/setter type mismatches",
              "default": "none"
            },
            "reportFunctionMemberAccess": {
              "$id": "#/properties/reportFunctionMemberAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of member accesses on function objects",
              "default": "none"
            },
            "reportMissingImports": {
              "$id": "#/properties/reportMissingImports",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved",
              "default": "error"
            },
            "reportMissingModuleSource": {
              "$id": "#/properties/reportMissingModuleSource",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved to source files",
              "default": "warning"
            },
            "reportMissingTypeStubs": {
              "$id": "#/properties/reportMissingTypeStubs",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved to type stub files",
              "default": "none"
            },
            "reportImportCycles": {
              "$id": "#/properties/reportImportCycles",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of module imports that create cycles in import graph",
              "default": "none"
            },
            "reportUnusedImport": {
              "$id": "#/properties/reportUnusedImport",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imported symbols that are not referenced within the source file",
              "default": "none"
            },
            "reportUnusedClass": {
              "$id": "#/properties/reportUnusedClass",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private classes that are not accessed",
              "default": "none"
            },
            "reportUnusedFunction": {
              "$id": "#/properties/reportUnusedFunction",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private functions or methods that are not accessed",
              "default": "none"
            },
            "reportUnusedVariable": {
              "$id": "#/properties/reportUnusedVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of local variables that are not accessed",
              "default": "none"
            },
            "reportDuplicateImport": {
              "$id": "#/properties/reportDuplicateImport",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of symbols or modules that are imported more than once",
              "default": "none"
            },
            "reportWildcardImportFromLibrary": {
              "$id": "#/properties/reportWildcardImportFromLibrary",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of wlidcard import from external library",
              "default": "none"
            },
            "reportOptionalSubscript": {
              "$id": "#/properties/reportOptionalSubscript",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to subscript (index) a variable with Optional type",
              "default": "error"
            },
            "reportOptionalMemberAccess": {
              "$id": "#/properties/reportOptionalMemberAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to access a member of a variable with Optional type",
              "default": "error"
            },
            "reportOptionalCall": {
              "$id": "#/properties/reportOptionalCall",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to call a variable with Optional type",
              "default": "error"
            },
            "reportOptionalIterable": {
              "$id": "#/properties/reportOptionalIterable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as an iterable value",
              "default": "error"
            },
            "reportOptionalContextManager": {
              "$id": "#/properties/reportOptionalContextManager",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as a parameter to a with statement",
              "default": "error"
            },
            "reportOptionalOperand": {
              "$id": "#/properties/reportOptionalOperand",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as an operand for a binary or unary operator",
              "default": "error"
            },
            "reportTypedDictNotRequiredAccess": {
              "$id": "#/properties/reportTypedDictNotRequiredAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to access a non-required key in a TypedDict without a check for its presence",
              "default": "error"
            },
            "reportUntypedFunctionDecorator": {
              "$id": "#/properties/reportUntypedFunctionDecorator",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of function decorators without type annotations, which obscure function types",
              "default": "none"
            },
            "reportUntypedClassDecorator": {
              "$id": "#/properties/reportUntypedClassDecorator",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of class decorators without type annotations, which obscure class types",
              "default": "none"
            },
            "reportUntypedBaseClass": {
              "$id": "#/properties/reportUntypedBaseClass",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of a base class of an unknown type, which obscures most type checking for the class",
              "default": "none"
            },
            "reportUntypedNamedTuple": {
              "$id": "#/properties/reportUntypedNamedTuple",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of a named tuple definition that does not contain type information",
              "default": "none"
            },
            "reportPrivateUsage": {
              "$id": "#/properties/reportPrivateUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private variables and functions used outside of the owning class or module and usage of protected members outside of subclasses",
              "default": "none"
            },
            "reportTypeCommentUsage": {
              "$id": "#/properties/reportTypeCommentUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of deprecated type comment usage",
              "default": "none"
            },
            "reportPrivateImportUsage": {
              "$id": "#/properties/reportPrivateImportUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of improper usage of symbol imported from a \"py.typed\" module that is not re-exported from that module",
              "default": "error"
            },
            "reportConstantRedefinition": {
              "$id": "#/properties/reportConstantRedefinition",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to redefine variables that are in all-caps",
              "default": "none"
            },
            "reportIncompatibleMethodOverride": {
              "$id": "#/properties/reportIncompatibleMethodOverride",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of method overrides in subclasses that redefine the method in an incompatible way",
              "default": "none"
            },
            "reportIncompatibleVariableOverride": {
              "$id": "#/properties/reportIncompatibleVariableOverride",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of overrides in subclasses that redefine a variable in an incompatible way",
              "default": "none"
            },
            "reportInconsistentConstructor": {
              "$id": "#/properties/reportInconsistentConstructor",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of __init__ and __new__ methods whose signatures are inconsistent",
              "default": "none"
            },
            "reportOverlappingOverload": {
              "$id": "#/properties/reportOverlappingOverload",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of function overloads that overlap in signature and obscure each other or do not agree on return type",
              "default": "none"
            },
            "reportMissingSuperCall": {
              "$id": "#/properties/reportMissingSuperCall",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of missing call to parent class for inherited `__init__` methods",
              "default": "none"
            },
            "reportUninitializedInstanceVariable": {
              "$id": "#/properties/reportUninitializedInstanceVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of instance variables that are not initialized in the constructor",
              "default": "none"
            },
            "reportInvalidStringEscapeSequence": {
              "$id": "#/properties/reportInvalidStringEscapeSequence",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of invalid escape sequences used within string literals",
              "default": "warning"
            },
            "reportUnknownParameterType": {
              "$id": "#/properties/reportUnknownParameterType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input and return parameters whose types are unknown",
              "default": "none"
            },
            "reportUnknownArgumentType": {
              "$id": "#/properties/reportUnknownArgumentType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting argument expressions whose types are unknown",
              "default": "none"
            },
            "reportUnknownLambdaType": {
              "$id": "#/properties/reportUnknownLambdaType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input and return parameters for lambdas whose types are unknown",
              "default": "none"
            },
            "reportUnknownVariableType": {
              "$id": "#/properties/reportUnknownVariableType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting local variables whose types are unknown",
              "default": "none"
            },
            "reportUnknownMemberType": {
              "$id": "#/properties/reportUnknownMemberType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting class and instance variables whose types are unknown",
              "default": "none"
            },
            "reportMissingParameterType": {
              "$id": "#/properties/reportMissingParameterType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input parameters that are missing a type annotation",
              "default": "none"
            },
            "reportMissingTypeArgument": {
              "$id": "#/properties/reportMissingTypeArgument",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting generic class reference with missing type arguments",
              "default": "none"
            },
            "reportInvalidTypeVarUse": {
              "$id": "#/properties/reportInvalidTypeVarUse",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting improper use of type variables within function signatures",
              "default": "warning"
            },
            "reportCallInDefaultInitializer": {
              "$id": "#/properties/reportCallInDefaultInitializer",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting usage of function calls within a default value initializer expression",
              "default": "none"
            },
            "reportUnnecessaryIsInstance": {
              "$id": "#/properties/reportUnnecessaryIsInstance",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting calls to 'isinstance' or 'issubclass' where the result is statically determined to be always true",
              "default": "none"
            },
            "reportUnnecessaryCast": {
              "$id": "#/properties/reportUnnecessaryCast",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting calls to 'cast' that are unnecessary",
              "default": "none"
            },
            "reportUnnecessaryComparison": {
              "$id": "#/properties/reportUnnecessaryComparison",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting the use of '==' or '!=' comparisons that are unnecessary",
              "default": "none"
            },
            "reportUnnecessaryContains": {
              "$id": "#/properties/reportUnnecessaryContains",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting the use of 'in' operations that are unnecessary",
              "default": "none"
            },
            "reportAssertAlwaysTrue": {
              "$id": "#/properties/reportAssertAlwaysTrue",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting assert expressions that will always evaluate to true",
              "default": "warning"
            },
            "reportSelfClsParameterName": {
              "$id": "#/properties/reportSelfClsParameterName",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting assert expressions that will always evaluate to true",
              "default": "warning"
            },
            "reportImplicitStringConcatenation": {
              "$id": "#/properties/reportImplicitStringConcatenation",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting usage of implicit concatenation of string literals",
              "default": "warning"
            },
            "reportUnboundVariable": {
              "$id": "#/properties/reportUnboundVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an unbound or possibly unbound variable",
              "default": "error"
            },
            "reportUndefinedVariable": {
              "$id": "#/properties/reportUndefinedVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an undefined variable",
              "default": "error"
            },
            "reportInvalidStubStatement": {
              "$id": "#/properties/reportInvalidStubStatement",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of type stub statements that do not conform to PEP 484",
              "default": "none"
            },
            "reportIncompleteStub": {
              "$id": "#/properties/reportIncompleteStub",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of incomplete type stubs that declare a module-level __getattr__ function",
              "default": "none"
            },
            "reportUnsupportedDunderAll": {
              "$id": "#/properties/reportUnsupportedDunderAll",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of unsupported operations performed on __all__",
              "default": "warning"
            },
            "reportUnusedCallResult": {
              "$id": "#/properties/reportUnusedCallResult",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of call expressions whose results are not consumed",
              "default": "none"
            },
            "reportUnusedCoroutine": {
              "$id": "#/properties/reportUnusedCoroutine",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of call expressions that returns Coroutine whose results are not consumed",
              "default": "error"
            },
            "reportUnusedExpression": {
              "$id": "#/properties/reportUnusedExpression",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of simple expressions whose value is not used in any way",
              "default": "warning"
            },
            "reportUnnecessaryTypeIgnoreComment": {
              "$id": "#/properties/reportUnnecessaryTypeIgnoreComment",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of '# type: ignore' comments that have no effect'",
              "default": "none"
            },
            "reportMatchNotExhaustive": {
              "$id": "#/properties/reportMatchNotExhaustive",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of 'match' statements that do not exhaustively match all possible values",
              "default": "none"
            },
            "reportShadowedImports": {
              "$id": "#/properties/reportShadowedImports",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of shadowed imports of stdlib modules",
              "default": "none"
            },
            "extraPaths": {
              "$id": "#/properties/extraPaths",
              "type": "array",
              "title": "Additional import search resolution paths",
              "items": {
                "$id": "#/properties/extraPaths/items",
                "type": "string",
                "title": "Additional import search resolution path",
                "default": "",
                "pattern": "^(.*)$"
              }
            },
            "pythonVersion": {
              "$id": "#/properties/pythonVersion",
              "type": "string",
              "title": "Python version to assume during type analysis",
              "default": "",
              "examples": [
                "3.7"
              ],
              "pattern": "^3\\.[0-9]+$"
            },
            "pythonPlatform": {
              "$id": "#/properties/pythonPlatform",
              "type": "string",
              "title": "Python platform to assume during type analysis",
              "default": "",
              "examples": [
                "Linux"
              ],
              "pattern": "^(Linux|Windows|Darwin|All)$"
            },
            "venvPath": {
              "$id": "#/properties/venvPath",
              "type": "string",
              "title": "Path to directory containing a folder of virtual environments",
              "default": "",
              "pattern": "^(.*)$"
            },
            "venv": {
              "$id": "#/properties/venv",
              "type": "string",
              "title": "Name of virtual environment subdirectory within venvPath",
              "default": "",
              "examples": [
                "python37"
              ],
              "pattern": "^(.*)$"
            },
            "verboseOutput": {
              "$id": "#/properties/verboseOutput",
              "type": "boolean",
              "title": "Output verbose logging",
              "default": false
            },
            "executionEnvironments": {
              "$id": "#/properties/executionEnvironments",
              "type": "array",
              "title": "Analysis settings to use for specified subdirectories of code",
              "items": {
                "$id": "#/properties/executionEnvironments/items",
                "type": "object",
                "title": "Analysis settings to use for specified subdirectories of code",
                "required": [
                  "root"
                ],
                "properties": {
                  "root": {
                    "$id": "#/properties/executionEnvironments/items/properties/root",
                    "type": "string",
                    "title": "Path to code subdirectory to which these settings apply",
                    "default": "",
                    "pattern": "^(.*)$"
                  },
                  "extraPaths": {
                    "$id": "#/properties/executionEnvironments/items/properties/extraPaths",
                    "type": "array",
                    "title": "Additional import search resolution paths",
                    "items": {
                      "$id": "#/properties/executionEnvironments/items/properties/extraPaths/items",
                      "type": "string",
                      "title": "Additional import search resolution path",
                      "default": "",
                      "pattern": "^(.*)$"
                    }
                  },
                  "pythonVersion": {
                    "$id": "#/properties/executionEnvironments/items/properties/pythonVersion",
                    "type": "string",
                    "title": "Python version to assume during type analysis",
                    "default": "",
                    "examples": [
                      "3.7"
                    ],
                    "pattern": "^3\\.[0-9]+$"
                  },
                  "pythonPlatform": {
                    "$id": "#/properties/executionEnvironments/items/properties/pythonPlatform",
                    "type": "string",
                    "title": "Python platform to assume during type analysis",
                    "default": "",
                    "examples": [
                      "Linux"
                    ],
                    "pattern": "^(Linux|Windows|Darwin|All)$"
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-pyright": {
                      "$ref": "sublime://settings/LSP-pyright#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
