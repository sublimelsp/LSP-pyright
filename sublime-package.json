{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-pyright.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-pyright",
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-pyright#/definitions/PluginConfig"
            }
          ],
          "definitions": {
            "PluginConfig": {
              "properties": {
                "settings": {
                  "additionalProperties": false,
                  "properties": {
                    "pyright.dev_environment": {
                      "default": "",
                      "description": "Enables the pre-defined environment setup for specific developing needs.",
                      "enum": [
                        "",
                        "sublime_text",
                        "sublime_text_33",
                        "sublime_text_38"
                      ],
                      "markdownEnumDescriptions": [
                        "No modifications applied.",
                        "Suitable for people who are developing ST python plugins. The Python version which the developed plugin runs on will be used. - `sys.path` from the plugin_host will be added into \"python.analysis.extraPaths\" so that ST package dependencies can be resolved by the LSP server.",
                        "Similar to \"sublime_text\" but Python 3.3 forced.",
                        "Similar to \"sublime_text\" but Python 3.8 forced."
                      ]
                    },
                    "pyright.disableLanguageServices": {
                      "default": false,
                      "description": "Disables type completion, definitions, and references.",
                      "type": "boolean"
                    },
                    "pyright.disableOrganizeImports": {
                      "default": false,
                      "description": "Disables the \u201cOrganize Imports\u201d command.",
                      "type": "boolean"
                    },
                    "python.analysis.autoImportCompletions": {
                      "default": true,
                      "description": "Offer auto-import completions.",
                      "type": "boolean"
                    },
                    "python.analysis.autoSearchPaths": {
                      "default": true,
                      "description": "Automatically add common search paths like 'src'?",
                      "type": "boolean"
                    },
                    "python.analysis.diagnosticMode": {
                      "default": "openFilesOnly",
                      "enum": [
                        "openFilesOnly",
                        "workspace"
                      ],
                      "enumDescriptions": [
                        "Analyzes and reports errors on only open files.",
                        "Analyzes and reports errors on all files in the workspace."
                      ],
                      "type": "string"
                    },
                    "python.analysis.diagnosticSeverityOverrides": {
                      "description": "Allows a user to override the severity levels for individual diagnostics.",
                      "properties": {
                        "analyzeUnannotatedFunctions": {
                          "$ref": "sublime://pyrightconfig#/properties/analyzeUnannotatedFunctions"
                        },
                        "deprecateTypingAliases": {
                          "$ref": "sublime://pyrightconfig#/properties/deprecateTypingAliases"
                        },
                        "disableBytesTypePromotions": {
                          "$ref": "sublime://pyrightconfig#/properties/disableBytesTypePromotions"
                        },
                        "enableExperimentalFeatures": {
                          "$ref": "sublime://pyrightconfig#/properties/enableExperimentalFeatures"
                        },
                        "enableTypeIgnoreComments": {
                          "$ref": "sublime://pyrightconfig#/properties/enableTypeIgnoreComments"
                        },
                        "reportAssertAlwaysTrue": {
                          "$ref": "sublime://pyrightconfig#/properties/reportAssertAlwaysTrue"
                        },
                        "reportCallInDefaultInitializer": {
                          "$ref": "sublime://pyrightconfig#/properties/reportCallInDefaultInitializer"
                        },
                        "reportConstantRedefinition": {
                          "$ref": "sublime://pyrightconfig#/properties/reportConstantRedefinition"
                        },
                        "reportDeprecated": {
                          "$ref": "sublime://pyrightconfig#/properties/reportDeprecated"
                        },
                        "reportDuplicateImport": {
                          "$ref": "sublime://pyrightconfig#/properties/reportDuplicateImport"
                        },
                        "reportFunctionMemberAccess": {
                          "$ref": "sublime://pyrightconfig#/properties/reportFunctionMemberAccess"
                        },
                        "reportGeneralTypeIssues": {
                          "$ref": "sublime://pyrightconfig#/properties/reportGeneralTypeIssues"
                        },
                        "reportImplicitOverride": {
                          "$ref": "sublime://pyrightconfig#/properties/reportImplicitOverride"
                        },
                        "reportImplicitStringConcatenation": {
                          "$ref": "sublime://pyrightconfig#/properties/reportImplicitStringConcatenation"
                        },
                        "reportImportCycles": {
                          "$ref": "sublime://pyrightconfig#/properties/reportImportCycles"
                        },
                        "reportIncompatibleMethodOverride": {
                          "$ref": "sublime://pyrightconfig#/properties/reportIncompatibleMethodOverride"
                        },
                        "reportIncompatibleVariableOverride": {
                          "$ref": "sublime://pyrightconfig#/properties/reportIncompatibleVariableOverride"
                        },
                        "reportIncompleteStub": {
                          "$ref": "sublime://pyrightconfig#/properties/reportIncompleteStub"
                        },
                        "reportInconsistentConstructor": {
                          "$ref": "sublime://pyrightconfig#/properties/reportInconsistentConstructor"
                        },
                        "reportInvalidStringEscapeSequence": {
                          "$ref": "sublime://pyrightconfig#/properties/reportInvalidStringEscapeSequence"
                        },
                        "reportInvalidStubStatement": {
                          "$ref": "sublime://pyrightconfig#/properties/reportInvalidStubStatement"
                        },
                        "reportInvalidTypeVarUse": {
                          "$ref": "sublime://pyrightconfig#/properties/reportInvalidTypeVarUse"
                        },
                        "reportMatchNotExhaustive": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMatchNotExhaustive"
                        },
                        "reportMissingImports": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingImports"
                        },
                        "reportMissingModuleSource": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingModuleSource"
                        },
                        "reportMissingParameterType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingParameterType"
                        },
                        "reportMissingSuperCall": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingSuperCall"
                        },
                        "reportMissingTypeArgument": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingTypeArgument"
                        },
                        "reportMissingTypeStubs": {
                          "$ref": "sublime://pyrightconfig#/properties/reportMissingTypeStubs"
                        },
                        "reportOptionalCall": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalCall"
                        },
                        "reportOptionalContextManager": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalContextManager"
                        },
                        "reportOptionalIterable": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalIterable"
                        },
                        "reportOptionalMemberAccess": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalMemberAccess"
                        },
                        "reportOptionalOperand": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalOperand"
                        },
                        "reportOptionalSubscript": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOptionalSubscript"
                        },
                        "reportOverlappingOverload": {
                          "$ref": "sublime://pyrightconfig#/properties/reportOverlappingOverload"
                        },
                        "reportPrivateImportUsage": {
                          "$ref": "sublime://pyrightconfig#/properties/reportPrivateImportUsage"
                        },
                        "reportPrivateUsage": {
                          "$ref": "sublime://pyrightconfig#/properties/reportPrivateUsage"
                        },
                        "reportPropertyTypeMismatch": {
                          "$ref": "sublime://pyrightconfig#/properties/reportPropertyTypeMismatch"
                        },
                        "reportSelfClsParameterName": {
                          "$ref": "sublime://pyrightconfig#/properties/reportSelfClsParameterName"
                        },
                        "reportShadowedImports": {
                          "$ref": "sublime://pyrightconfig#/properties/reportShadowedImports"
                        },
                        "reportTypeCommentUsage": {
                          "$ref": "sublime://pyrightconfig#/properties/reportTypeCommentUsage"
                        },
                        "reportTypedDictNotRequiredAccess": {
                          "$ref": "sublime://pyrightconfig#/properties/reportTypedDictNotRequiredAccess"
                        },
                        "reportUnboundVariable": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnboundVariable"
                        },
                        "reportUndefinedVariable": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUndefinedVariable"
                        },
                        "reportUninitializedInstanceVariable": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUninitializedInstanceVariable"
                        },
                        "reportUnknownArgumentType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnknownArgumentType"
                        },
                        "reportUnknownLambdaType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnknownLambdaType"
                        },
                        "reportUnknownMemberType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnknownMemberType"
                        },
                        "reportUnknownParameterType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnknownParameterType"
                        },
                        "reportUnknownVariableType": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnknownVariableType"
                        },
                        "reportUnnecessaryCast": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnnecessaryCast"
                        },
                        "reportUnnecessaryComparison": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnnecessaryComparison"
                        },
                        "reportUnnecessaryContains": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnnecessaryContains"
                        },
                        "reportUnnecessaryIsInstance": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnnecessaryIsInstance"
                        },
                        "reportUnnecessaryTypeIgnoreComment": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnnecessaryTypeIgnoreComment"
                        },
                        "reportUnsupportedDunderAll": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnsupportedDunderAll"
                        },
                        "reportUntypedBaseClass": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUntypedBaseClass"
                        },
                        "reportUntypedClassDecorator": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUntypedClassDecorator"
                        },
                        "reportUntypedFunctionDecorator": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUntypedFunctionDecorator"
                        },
                        "reportUntypedNamedTuple": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUntypedNamedTuple"
                        },
                        "reportUnusedCallResult": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedCallResult"
                        },
                        "reportUnusedClass": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedClass"
                        },
                        "reportUnusedCoroutine": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedCoroutine"
                        },
                        "reportUnusedExpression": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedExpression"
                        },
                        "reportUnusedFunction": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedFunction"
                        },
                        "reportUnusedImport": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedImport"
                        },
                        "reportUnusedVariable": {
                          "$ref": "sublime://pyrightconfig#/properties/reportUnusedVariable"
                        },
                        "reportWildcardImportFromLibrary": {
                          "$ref": "sublime://pyrightconfig#/properties/reportWildcardImportFromLibrary"
                        },
                        "strictDictionaryInference": {
                          "$ref": "sublime://pyrightconfig#/properties/strictDictionaryInference"
                        },
                        "strictListInference": {
                          "$ref": "sublime://pyrightconfig#/properties/strictListInference"
                        },
                        "strictParameterNoneValue": {
                          "$ref": "sublime://pyrightconfig#/properties/strictParameterNoneValue"
                        },
                        "strictSetInference": {
                          "$ref": "sublime://pyrightconfig#/properties/strictSetInference"
                        }
                      },
                      "type": "object"
                    },
                    "python.analysis.extraPaths": {
                      "$ref": "sublime://pyrightconfig#/properties/extraPaths"
                    },
                    "python.analysis.logLevel": {
                      "default": "Information",
                      "description": "Specifies the level of logging for the Output panel",
                      "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Trace"
                      ],
                      "type": "string"
                    },
                    "python.analysis.stubPath": {
                      "$ref": "sublime://pyrightconfig#/properties/stubPath"
                    },
                    "python.analysis.typeCheckingMode": {
                      "$ref": "sublime://pyrightconfig#/properties/typeCheckingMode"
                    },
                    "python.analysis.typeshedPaths": {
                      "default": [],
                      "description": "Paths to look for typeshed modules.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "python.analysis.useLibraryCodeForTypes": {
                      "$ref": "sublime://pyrightconfig#/properties/useLibraryCodeForTypes"
                    },
                    "python.pythonPath": {
                      "default": "python",
                      "description": "Path to Python, you can use a custom version of Python.",
                      "type": "string"
                    },
                    "python.venvPath": {
                      "$ref": "sublime://pyrightconfig#/properties/venvPath"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/pyrightconfig.json"
        ],
        "schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "description": "Pyright Configuration Schema",
          "allowComments": true,
          "allowTrailingCommas": true,
          "type": "object",
          "definitions": {
            "diagnostic": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "none",
                    "information",
                    "warning",
                    "error"
                  ]
                }
              ]
            }
          },
          "properties": {
            "include": {
              "$id": "#/properties/include",
              "type": "array",
              "title": "Files and directories included in type analysis",
              "items": {
                "$id": "#/properties/include/items",
                "type": "string",
                "title": "File or directory to include in type analysis",
                "pattern": "^(.*)$"
              }
            },
            "exclude": {
              "$id": "#/properties/exclude",
              "type": "array",
              "title": "Files and directories excluded from type analysis",
              "items": {
                "$id": "#/properties/exclude/items",
                "type": "string",
                "title": "File or directory to exclude from type analysis",
                "pattern": "^(.*)$"
              }
            },
            "ignore": {
              "$id": "#/properties/ignore",
              "type": "array",
              "title": "Files and directories whose diagnostics are suppressed",
              "items": {
                "$id": "#/properties/ignore/items",
                "type": "string",
                "title": "File or directory where diagnostics should be suppressed",
                "pattern": "^(.*)$"
              }
            },
            "strict": {
              "$id": "#/properties/strict",
              "type": "array",
              "title": "Files and directories that should use 'strict' type checking rules",
              "items": {
                "$id": "#/properties/strict/items",
                "type": "string",
                "title": "File or directory that should use 'strict' type checking rules",
                "pattern": "^(.*)$"
              }
            },
            "defineConstant": {
              "$id": "#/properties/defineConstant",
              "type": "object",
              "title": "Identifiers that should be treated as constants",
              "properties": {},
              "additionalProperties": {
                "type": [
                  "string",
                  "boolean"
                ],
                "title": "Value of constant (boolean or string)"
              }
            },
            "typeCheckingMode": {
              "$id": "#/properties/typeCheckingMode",
              "type": "string",
              "enum": [
                "off",
                "basic",
                "standard",
                "strict"
              ],
              "title": "Specifies the default rule set to use for type checking",
              "default": "standard"
            },
            "useLibraryCodeForTypes": {
              "$id": "#/properties/useLibraryCodeForTypes",
              "type": "boolean",
              "title": "Use library implementations to extract type information when type stub is not present",
              "default": true
            },
            "typeshedPath": {
              "$id": "#/properties/typeshedPath",
              "type": "string",
              "title": "Path to directory containing typeshed type stub files",
              "default": "",
              "pattern": "^(.*)$"
            },
            "stubPath": {
              "$id": "#/properties/stubPath",
              "type": "string",
              "title": "Path to directory containing custom type stub files",
              "default": "",
              "examples": [
                "src/typestubs"
              ],
              "pattern": "^(.*)$"
            },
            "disableBytesTypePromotions": {
              "$id": "#/properties/disableBytesTypePromotions",
              "type": "boolean",
              "title": "Do not treat `bytearray` and `memoryview` as implicit subtypes of `bytes`",
              "default": false
            },
            "strictListInference": {
              "$id": "#/properties/strictListInference",
              "type": "boolean",
              "title": "Infer strict types for list expressions",
              "default": false
            },
            "strictSetInference": {
              "$id": "#/properties/strictSetInference",
              "type": "boolean",
              "title": "Infer strict types for set expressions",
              "default": false
            },
            "strictDictionaryInference": {
              "$id": "#/properties/strictDictionaryInference",
              "type": "boolean",
              "title": "Infer strict types for dictionary expressions",
              "default": false
            },
            "analyzeUnannotatedFunctions": {
              "$id": "#/properties/analyzeUnannotatedFunctions",
              "type": "boolean",
              "title": "Analyze and report diagnostics for functions that have no annotations",
              "default": true
            },
            "strictParameterNoneValue": {
              "$id": "#/properties/strictParameterNoneValue",
              "type": "boolean",
              "title": "Allow implicit Optional when default parameter value is None",
              "default": true
            },
            "enableExperimentalFeatures": {
              "$id": "#/properties/enableExperimentalFeatures",
              "type": "boolean",
              "title": "Enable the use of experimental features that are not part of the Python typing spec",
              "default": false
            },
            "enableTypeIgnoreComments": {
              "$id": "#/properties/enableTypeIgnoreComments",
              "type": "boolean",
              "title": "Allow \"# type: ignore\" comments",
              "default": true
            },
            "deprecateTypingAliases": {
              "$id": "#/properties/deprecateTypingAliases",
              "type": "boolean",
              "title": "Treat typing-specific aliases to standard types as deprecated",
              "default": false
            },
            "reportGeneralTypeIssues": {
              "$id": "#/properties/reportGeneralTypeIssues",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of general type issues",
              "default": "error"
            },
            "reportPropertyTypeMismatch": {
              "$id": "#/properties/reportPropertyTypeMismatch",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of property getter/setter type mismatches",
              "default": "none"
            },
            "reportFunctionMemberAccess": {
              "$id": "#/properties/reportFunctionMemberAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of member accesses on function objects",
              "default": "error"
            },
            "reportMissingImports": {
              "$id": "#/properties/reportMissingImports",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved",
              "default": "error"
            },
            "reportMissingModuleSource": {
              "$id": "#/properties/reportMissingModuleSource",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved to source files",
              "default": "warning"
            },
            "reportMissingTypeStubs": {
              "$id": "#/properties/reportMissingTypeStubs",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imports that cannot be resolved to type stub files",
              "default": "warning"
            },
            "reportImportCycles": {
              "$id": "#/properties/reportImportCycles",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of module imports that create cycles in import graph",
              "default": "none"
            },
            "reportUnusedImport": {
              "$id": "#/properties/reportUnusedImport",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of imported symbols that are not referenced within the source file",
              "default": "none"
            },
            "reportUnusedClass": {
              "$id": "#/properties/reportUnusedClass",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private classes that are not accessed",
              "default": "none"
            },
            "reportUnusedFunction": {
              "$id": "#/properties/reportUnusedFunction",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private functions or methods that are not accessed",
              "default": "none"
            },
            "reportUnusedVariable": {
              "$id": "#/properties/reportUnusedVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of local variables that are not accessed",
              "default": "none"
            },
            "reportDuplicateImport": {
              "$id": "#/properties/reportDuplicateImport",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of symbols or modules that are imported more than once",
              "default": "none"
            },
            "reportWildcardImportFromLibrary": {
              "$id": "#/properties/reportWildcardImportFromLibrary",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of wlidcard import from external library",
              "default": "warning"
            },
            "reportOptionalSubscript": {
              "$id": "#/properties/reportOptionalSubscript",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to subscript (index) a variable with Optional type",
              "default": "error"
            },
            "reportOptionalMemberAccess": {
              "$id": "#/properties/reportOptionalMemberAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to access a member of a variable with Optional type",
              "default": "error"
            },
            "reportOptionalCall": {
              "$id": "#/properties/reportOptionalCall",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to call a variable with Optional type",
              "default": "error"
            },
            "reportOptionalIterable": {
              "$id": "#/properties/reportOptionalIterable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as an iterable value",
              "default": "error"
            },
            "reportOptionalContextManager": {
              "$id": "#/properties/reportOptionalContextManager",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as a parameter to a with statement",
              "default": "error"
            },
            "reportOptionalOperand": {
              "$id": "#/properties/reportOptionalOperand",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an Optional type as an operand for a binary or unary operator",
              "default": "error"
            },
            "reportTypedDictNotRequiredAccess": {
              "$id": "#/properties/reportTypedDictNotRequiredAccess",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to access a non-required key in a TypedDict without a check for its presence",
              "default": "error"
            },
            "reportUntypedFunctionDecorator": {
              "$id": "#/properties/reportUntypedFunctionDecorator",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of function decorators without type annotations, which obscure function types",
              "default": "none"
            },
            "reportUntypedClassDecorator": {
              "$id": "#/properties/reportUntypedClassDecorator",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of class decorators without type annotations, which obscure class types",
              "default": "none"
            },
            "reportUntypedBaseClass": {
              "$id": "#/properties/reportUntypedBaseClass",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of a base class of an unknown type, which obscures most type checking for the class",
              "default": "none"
            },
            "reportUntypedNamedTuple": {
              "$id": "#/properties/reportUntypedNamedTuple",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of a named tuple definition that does not contain type information",
              "default": "none"
            },
            "reportPrivateUsage": {
              "$id": "#/properties/reportPrivateUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of private variables and functions used outside of the owning class or module and usage of protected members outside of subclasses",
              "default": "none"
            },
            "reportTypeCommentUsage": {
              "$id": "#/properties/reportTypeCommentUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of deprecated type comment usage",
              "default": "none"
            },
            "reportPrivateImportUsage": {
              "$id": "#/properties/reportPrivateImportUsage",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of improper usage of symbol imported from a \"py.typed\" module that is not re-exported from that module",
              "default": "error"
            },
            "reportConstantRedefinition": {
              "$id": "#/properties/reportConstantRedefinition",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to redefine variables that are in all-caps",
              "default": "none"
            },
            "reportDeprecated": {
              "$id": "#/properties/reportDeprecated",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of use of deprecated class or function",
              "default": "none"
            },
            "reportIncompatibleMethodOverride": {
              "$id": "#/properties/reportIncompatibleMethodOverride",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of method overrides in subclasses that redefine the method in an incompatible way",
              "default": "error"
            },
            "reportIncompatibleVariableOverride": {
              "$id": "#/properties/reportIncompatibleVariableOverride",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of overrides in subclasses that redefine a variable in an incompatible way",
              "default": "error"
            },
            "reportInconsistentConstructor": {
              "$id": "#/properties/reportInconsistentConstructor",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of __init__ and __new__ methods whose signatures are inconsistent",
              "default": "none"
            },
            "reportOverlappingOverload": {
              "$id": "#/properties/reportOverlappingOverload",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of function overloads that overlap in signature and obscure each other or do not agree on return type",
              "default": "error"
            },
            "reportMissingSuperCall": {
              "$id": "#/properties/reportMissingSuperCall",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of missing call to parent class for inherited `__init__` methods",
              "default": "none"
            },
            "reportUninitializedInstanceVariable": {
              "$id": "#/properties/reportUninitializedInstanceVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of instance variables that are not initialized in the constructor",
              "default": "none"
            },
            "reportInvalidStringEscapeSequence": {
              "$id": "#/properties/reportInvalidStringEscapeSequence",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of invalid escape sequences used within string literals",
              "default": "warning"
            },
            "reportUnknownParameterType": {
              "$id": "#/properties/reportUnknownParameterType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input and return parameters whose types are unknown",
              "default": "none"
            },
            "reportUnknownArgumentType": {
              "$id": "#/properties/reportUnknownArgumentType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting argument expressions whose types are unknown",
              "default": "none"
            },
            "reportUnknownLambdaType": {
              "$id": "#/properties/reportUnknownLambdaType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input and return parameters for lambdas whose types are unknown",
              "default": "none"
            },
            "reportUnknownVariableType": {
              "$id": "#/properties/reportUnknownVariableType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting local variables whose types are unknown",
              "default": "none"
            },
            "reportUnknownMemberType": {
              "$id": "#/properties/reportUnknownMemberType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting class and instance variables whose types are unknown",
              "default": "none"
            },
            "reportMissingParameterType": {
              "$id": "#/properties/reportMissingParameterType",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting input parameters that are missing a type annotation",
              "default": "none"
            },
            "reportMissingTypeArgument": {
              "$id": "#/properties/reportMissingTypeArgument",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting generic class reference with missing type arguments",
              "default": "none"
            },
            "reportInvalidTypeVarUse": {
              "$id": "#/properties/reportInvalidTypeVarUse",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting improper use of type variables within function signatures",
              "default": "warning"
            },
            "reportCallInDefaultInitializer": {
              "$id": "#/properties/reportCallInDefaultInitializer",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting usage of function calls within a default value initializer expression",
              "default": "none"
            },
            "reportUnnecessaryIsInstance": {
              "$id": "#/properties/reportUnnecessaryIsInstance",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting calls to 'isinstance' or 'issubclass' where the result is statically determined to be always true",
              "default": "none"
            },
            "reportUnnecessaryCast": {
              "$id": "#/properties/reportUnnecessaryCast",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting calls to 'cast' that are unnecessary",
              "default": "none"
            },
            "reportUnnecessaryComparison": {
              "$id": "#/properties/reportUnnecessaryComparison",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting the use of '==' or '!=' comparisons that are unnecessary",
              "default": "none"
            },
            "reportUnnecessaryContains": {
              "$id": "#/properties/reportUnnecessaryContains",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting the use of 'in' operations that are unnecessary",
              "default": "none"
            },
            "reportAssertAlwaysTrue": {
              "$id": "#/properties/reportAssertAlwaysTrue",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting assert expressions that will always evaluate to true",
              "default": "warning"
            },
            "reportSelfClsParameterName": {
              "$id": "#/properties/reportSelfClsParameterName",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting assert expressions that will always evaluate to true",
              "default": "warning"
            },
            "reportImplicitStringConcatenation": {
              "$id": "#/properties/reportImplicitStringConcatenation",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting usage of implicit concatenation of string literals",
              "default": "warning"
            },
            "reportUnboundVariable": {
              "$id": "#/properties/reportUnboundVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an unbound or possibly unbound variable",
              "default": "error"
            },
            "reportUndefinedVariable": {
              "$id": "#/properties/reportUndefinedVariable",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of attempts to use an undefined variable",
              "default": "error"
            },
            "reportInvalidStubStatement": {
              "$id": "#/properties/reportInvalidStubStatement",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of type stub statements that do not conform to PEP 484",
              "default": "none"
            },
            "reportIncompleteStub": {
              "$id": "#/properties/reportIncompleteStub",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of incomplete type stubs that declare a module-level __getattr__ function",
              "default": "none"
            },
            "reportUnsupportedDunderAll": {
              "$id": "#/properties/reportUnsupportedDunderAll",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of unsupported operations performed on __all__",
              "default": "warning"
            },
            "reportUnusedCallResult": {
              "$id": "#/properties/reportUnusedCallResult",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of call expressions whose results are not consumed",
              "default": "none"
            },
            "reportUnusedCoroutine": {
              "$id": "#/properties/reportUnusedCoroutine",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of call expressions that returns Coroutine whose results are not consumed",
              "default": "error"
            },
            "reportUnusedExpression": {
              "$id": "#/properties/reportUnusedExpression",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of simple expressions whose value is not used in any way",
              "default": "warning"
            },
            "reportUnnecessaryTypeIgnoreComment": {
              "$id": "#/properties/reportUnnecessaryTypeIgnoreComment",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of '# type: ignore' comments that have no effect'",
              "default": "none"
            },
            "reportMatchNotExhaustive": {
              "$id": "#/properties/reportMatchNotExhaustive",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of 'match' statements that do not exhaustively match all possible values",
              "default": "none"
            },
            "reportShadowedImports": {
              "$id": "#/properties/reportShadowedImports",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting of shadowed imports of stdlib modules",
              "default": "none"
            },
            "reportImplicitOverride": {
              "$id": "#/properties/reportImplicitOverride",
              "$ref": "#/definitions/diagnostic",
              "title": "Controls reporting overridden methods that are missing an `@override` decorator",
              "default": "none"
            },
            "extraPaths": {
              "$id": "#/properties/extraPaths",
              "type": "array",
              "title": "Additional import search resolution paths",
              "items": {
                "$id": "#/properties/extraPaths/items",
                "type": "string",
                "title": "Additional import search resolution path",
                "default": "",
                "pattern": "^(.*)$"
              }
            },
            "pythonVersion": {
              "$id": "#/properties/pythonVersion",
              "type": "string",
              "title": "Python version to assume during type analysis",
              "default": "",
              "examples": [
                "3.7"
              ],
              "pattern": "^3\\.[0-9]+$"
            },
            "pythonPlatform": {
              "$id": "#/properties/pythonPlatform",
              "type": "string",
              "title": "Python platform to assume during type analysis",
              "default": "",
              "examples": [
                "Linux"
              ],
              "pattern": "^(Linux|Windows|Darwin|All)$"
            },
            "venvPath": {
              "$id": "#/properties/venvPath",
              "type": "string",
              "title": "Path to directory containing a folder of virtual environments",
              "default": "",
              "pattern": "^(.*)$"
            },
            "venv": {
              "$id": "#/properties/venv",
              "type": "string",
              "title": "Name of virtual environment subdirectory within venvPath",
              "default": "",
              "examples": [
                "python37"
              ],
              "pattern": "^(.*)$"
            },
            "verboseOutput": {
              "$id": "#/properties/verboseOutput",
              "type": "boolean",
              "title": "Output verbose logging",
              "default": false
            },
            "executionEnvironments": {
              "$id": "#/properties/executionEnvironments",
              "type": "array",
              "title": "Analysis settings to use for specified subdirectories of code",
              "items": {
                "$id": "#/properties/executionEnvironments/items",
                "type": "object",
                "title": "Analysis settings to use for specified subdirectories of code",
                "required": [
                  "root"
                ],
                "properties": {
                  "root": {
                    "$id": "#/properties/executionEnvironments/items/properties/root",
                    "type": "string",
                    "title": "Path to code subdirectory to which these settings apply",
                    "default": "",
                    "pattern": "^(.*)$"
                  },
                  "extraPaths": {
                    "$id": "#/properties/executionEnvironments/items/properties/extraPaths",
                    "type": "array",
                    "title": "Additional import search resolution paths",
                    "items": {
                      "$id": "#/properties/executionEnvironments/items/properties/extraPaths/items",
                      "type": "string",
                      "title": "Additional import search resolution path",
                      "default": "",
                      "pattern": "^(.*)$"
                    }
                  },
                  "pythonVersion": {
                    "$id": "#/properties/executionEnvironments/items/properties/pythonVersion",
                    "type": "string",
                    "title": "Python version to assume during type analysis",
                    "default": "",
                    "examples": [
                      "3.7"
                    ],
                    "pattern": "^3\\.[0-9]+$"
                  },
                  "pythonPlatform": {
                    "$id": "#/properties/executionEnvironments/items/properties/pythonPlatform",
                    "type": "string",
                    "title": "Python platform to assume during type analysis",
                    "default": "",
                    "examples": [
                      "Linux"
                    ],
                    "pattern": "^(Linux|Windows|Darwin|All)$"
                  }
                }
              }
            }
          },
          "$id": "sublime://pyrightconfig"
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-pyright": {
                      "$ref": "sublime://settings/LSP-pyright#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}