{
	// @see https://github.com/microsoft/pyright
	"languages": [
		{
			"languageId": "python",
			"scopes": ["source.python"],
			"syntaxes": ["Packages/Python/Python.sublime-syntax"]
		}
	],
	// @see https://github.com/microsoft/pyright/blob/master/docs/configuration.md
	"initializationOptions": {
		// ...
	},
	// @see https://github.com/microsoft/pyright/blob/master/docs/settings.md
	// @see https://github.com/microsoft/pyright/blob/master/client/package.json
	"settings": {
		"python": {
			"analysis": {
				// Offer auto-import completions.
				"autoImportCompletions": true,
				// Automatically add common search paths like 'src'?
				"autoSearchPaths": true,
				// Additional import search resolution paths
				"extraPaths": [
					// For Sublime Text plugin development, you should add your
					// `Packages` directory (`sublime.packages_path()`)
					// and the path to sublime's python files
					// (`import os.path;os.path.dirname(sublime.__file__)`)
				],
				// Path to directory containing custom type stub files.
				"stubPath": "./typings",
				// "openFilesOnly" or "workspace"
				"diagnosticMode": "openFilesOnly",
				// Allows a user to override the severity levels for individual diagnostics.
				// @see https://github.com/microsoft/pyright/blob/master/docs/configuration.md#type-check-diagnostics-settings
				"diagnosticSeverityOverrides": {
					// "reportImplicitStringConcatenation": "warning",
					// "reportUnboundVariable": "warning",
					// "reportDuplicateImport ": "warning",
					// "reportUnusedClass": "information",
					// "reportUnusedFunction": "information",
					// "reportUnusedImport": "information",
					// "reportUnusedVariable": "information",
				},
				// Specifies the level of logging for the Output panel
				"logLevel": "info",
				// Defines the default rule set for type checking.
				"typeCheckingMode": "basic",
				// Paths to look for typeshed modules.
				// Hmm... doesn't seem to work on my side. May track https://github.com/microsoft/pylance-release/issues/29
				"typeshedPaths": [],
				// Use library implementations to extract type information when type stub is not present.
				"useLibraryCodeForTypes": true,
			},
			// Path to Python, you can use a custom version of Python.
			"pythonPath": "python",
			// Path to folder with a list of Virtual Environments.
			"venvPath": "",
		},
		"pyright": {
			// Disables type completion, definitions, and references.
			"disableLanguageServices": false,
			// Disables the "Organize Imports" command.
			"disableOrganizeImports": false,
		}
	}
}
