%YAML 1.2
---
name: Python (for LSP)
scope: source.python.lsp
hidden: true
file_extensions:
  - pyright-syntax-test

extends: Packages/LSP-pyright/syntaxes/Python.sublime-syntax

contexts:
  main:
    - meta_include_prototype: false
    - include: comments
    - include: lsp-line

  lsp-line:
    # consume the leading type. e.g., (function)
    - match: (?=^\()
      push: lsp-type
    - include: lsp-statement

  lsp-type:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.parens.begin.python
      set: lsp-type-body
    - include: pop-else

  lsp-type-body:
    - meta_scope: meta.parens.python
    - meta_content_scope: storage.type.python
    - match: \)
      scope: punctuation.section.parens.end.python
      pop: true

  lsp-statement:
    - include: pop-end
    - include: lsp-classes-instantiate
    - match: ({{identifier}})(:?)(?=\s*(?:\(|Overload\[))
      captures:
        1: meta.qualified-name.python meta.generic-name.python
        2: punctuation.separator.annotation.variable.python
      set:
        - include: pop-end
        - match: (?=Overload\[)
          push: lsp-in-overload-function
        - match: (?=\(\()
          push: lsp-in-union-function
    # general cases
    - include: statements

  # when hover on `Bar` in `foo = Bar()`
  lsp-classes-instantiate:
    - match: '^\s*(class)\b'
      captures:
        1: keyword.declaration.class.python
      push:
        - meta_scope: meta.class.python
        - include: line-continuation-or-pop
        - match: '(?={{identifier}})'
          push:
            - meta_content_scope: entity.name.class.python
            - include: entity-name-class
            - match: ''
              pop: true
        - include: lsp-function-parameters

  # overloaded (function) or (method)
  lsp-in-overload-function:
    - include: pop-end
    - match: (Overload)(\[)
      captures:
        1: meta.qualified-name.python meta.generic-name.python
        2: punctuation.section.sequence.begin.python
      push: lsp-in-overload-function
    - match: (?=\()
      push: lsp-function-parameters

  # union of (function) or (method)
  lsp-in-union-function:
    - include: pop-end
    - match: \((?=\()
      scope: punctuation.section.parameters.begin.python
      push: lsp-function-parameters
    - match: \|
      scope: keyword.operator.arithmetic.python

  lsp-function-parameters:
    - match: \(
      scope: meta.function.parameters.python punctuation.section.parameters.begin.python
      set: [function-parameters, allow-unpack-operators]

  # --------- #
  # overrides #
  # --------- #

  functions:
    # only the following line is modified to allow function definition not at BOL
    - match: '\b(?:(async)\s+)?(def)\b'
      captures:
        1: keyword.declaration.async.python
        2: keyword.declaration.function.python
      push:
        - meta_scope: meta.function.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.function.begin.python
          pop: true
        - match: '(?={{identifier}})'
          push:
            - meta_content_scope: entity.name.function.python
            - include: entity-name-function
            - match: ''
              pop: true
        - match: '(?=\()'
          set:
            - match: \(
              scope: meta.function.parameters.python punctuation.section.parameters.begin.python
              set: [function-parameters, allow-unpack-operators]

  function-terminator:
    # match trailing ending brackets in LSP popup
    - match: \)
      scope: punctuation.section.parameters.end.python
      pop: true
    - match: \]
      scope: punctuation.section.sequence.end.python
      pop: true
    # the separator among overloaded function signatures
    - match: ','
      scope: punctuation.separator.parameters.python
      pop: true
    # if ST 4, we can just use "meta_prepend" to replace the followings...
    # - meta_prepend: true
    - match: ':'
      scope: meta.function.python punctuation.section.function.begin.python
      pop: true
    - include: line-continuation-or-pop

  # ------- #
  # helpers #
  # ------- #

  pop-else:
    - match: (?=\S)
      pop: true

  pop-end:
    - match: $
      pop: true
