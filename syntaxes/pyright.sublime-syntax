%YAML 1.2
---
name: Python (for LSP)
scope: source.python.lsp
version: 2
hidden: true

extends: Packages/Python/Python.sublime-syntax

file_extensions:
  - pyright-syntax-test

contexts:
  main:
    - include: lsp-type
    - include: statements

###[ PYTHON TYPE ANNOTATIONS ]################################################

  function-parameter-annotation:
    - meta_prepend: true
    - include: lsp-type-annotations

  variable-annotation:
    - meta_prepend: true
    - include: lsp-type-annotations

###[ PYRIGHT TYPE TAGS ]######################################################

  lsp-type:
    # consume the leading type. e.g., (function)
    - match: ^\(
      scope: punctuation.section.parens.begin.python
      push: lsp-type-body

  lsp-type-body:
    - meta_scope: meta.parens.python
    - meta_content_scope: storage.type.python
    - match: \)
      scope: punctuation.section.parens.end.python
      pop: 1

###[ PYRIGHT TYPE ANNOTATIONS ]###############################################

  lsp-type-annotations:
    - include: lsp-type-parens
    - include: lsp-type-signatures

  lsp-type-parens:
    - match: (?=\()
      branch_point: lsp-type-parens
      branch:
        - lsp-type-function
        - lsp-type-group

  lsp-type-function:
    - match: \(
      scope: meta.function.parameters.python punctuation.section.parameters.begin.python
      set: lsp-type-function-parameter-list
    - include: immediately-pop

  lsp-type-function-parameter-list:
    - meta_content_scope: meta.function.parameters.python
    - match: \)
      scope: meta.function.parameters.python punctuation.section.parameters.end.python
      set: lsp-type-function-return-type
    - match: '{{colon}}'
      scope: punctuation.separator.annotation.parameter.python
      set: lsp-type-function-parameter-annotation
    - match: '{{identifier}}(?={{colon}})'
      scope: variable.parameter.python
    - include: function-parameter-annotation
    - include: lsp-type-parameter-common

  lsp-type-function-parameter-annotation:
    - meta_scope: meta.function.parameters.annotation.python
    - match: (?=[,)=])
      set: lsp-type-function-parameter-list
    - match: None\b
      scope: constant.language.null.python
    - include: expression-in-a-group

  lsp-type-parameter-common:
    - match: ','
      scope: punctuation.separator.parameters.python
      push: allow-unpack-operators
    - match: /
      scope: storage.modifier.positional-args-only.python
      push: function-parameter-expect-comma
    - match: '{{assignment_operator}}'
      scope: keyword.operator.assignment.python
      set: function-parameter-default-value
    - include: line-continuations
    - include: illegal-assignment-expressions

  lsp-type-function-return-type:
    - meta_content_scope: meta.function.python
    - match: ->
      scope: meta.function.annotation.return.python punctuation.separator.annotation.return.python
      set: function-return-type
    - match: (?=\S)
      fail: lsp-type-parens

  lsp-type-group:
    - match: \(
      scope: punctuation.section.group.begin.python
      set: lsp-type-group-body
    - include: immediately-pop

  lsp-type-group-body:
    - meta_scope: meta.group.python
    - match: \)
      scope: punctuation.section.group.end.python
      set: after-expression
    - include: lsp-type-annotations
    - include: expression-in-a-group

  lsp-type-signatures:
    - match: (?={{path}}\s*\[)
      push:
        - lsp-type-list
        - qualified-name-content

  lsp-type-list:
    - match: \[
      scope: punctuation.section.sequence.begin.python
      set: lsp-type-list-body

  lsp-type-list-body:
    - meta_scope: meta.sequence.list.python
    - match: \]
      scope: punctuation.section.sequence.end.python
      set: after-expression
    - include: lsp-type-annotations
    - include: expression-in-a-group

###[ PYTHON CLASS DEFINITION OVERRIDES ]######################################

  class-definition-base-list:
    # Python's class definitions look like:
    #
    #   `class Name(BaseClass1, BaseClass2)`
    #
    # pyright's class instantiation signatures however look like function definitions:
    #
    #   `class Name(var1: type1, var2: type2)`
    #
    - meta_include_prototype: false
    - match: \(
      scope: meta.class.parameters.python punctuation.section.parameters.begin.python
      set:
        - class-definition-base-list-body
        - allow-unpack-operators

  class-definition-base-list-body:
    - meta_content_scope: meta.class.parameters.python
    - match: \)
      scope: meta.class.parameters.python punctuation.section.parameters.end.python
      set: after-expression
    - match: '{{colon}}'
      scope: punctuation.separator.annotation.parameter.python
      set: class-definition-parameter-annotation
    - include: parameter-names
    - include: lsp-type-parameter-common

  class-definition-parameter-annotation:
    - meta_scope: meta.class.parameters.annotation.python
    - match: (?=[,)=])
      set: class-definition-base-list-body
    - match: None\b
      scope: constant.language.null.python
    - include: expression-in-a-group

  class-definition-parameter-default-value:
    - meta_scope: meta.class.parameters.default-value.python
    - match: (?=[,)])
      set: class-definition-base-list-body
    - include: expression-in-a-group

###[ PYTHON FUNCTION DEFINITION OVERRIDES ]###################################

  function-definitions:
    # make sure to highlight `def` after pyright's `(function)` tag.
    - match: (?:(async)\s+)?(def)\b
      scope: meta.function.python
      captures:
        1: keyword.declaration.async.python
        2: keyword.declaration.function.python
      push: function-definition-name

  function-definition-name:
    - meta_prepend: true
    # colon without function parameter list denotes extended function signature
    - match: '{{colon}}'
      scope: meta.function.python punctuation.section.function.begin.python
      set: lsp-function-signature

  lsp-function-signature:
    - meta_content_scope: meta.function.annotation.signature.python
    - include: function-definition-end
    - include: lsp-type-annotations
    - include: expression-in-a-statement

  function-definition-end:
    - meta_prepend: true
    # additional conditions which terminate a function signature
    - match: (?=[,)\]])
      pop: 1

###[ PROTOTYPES ]#############################################################

  eol-pop:
    - match: $
      pop: 1
